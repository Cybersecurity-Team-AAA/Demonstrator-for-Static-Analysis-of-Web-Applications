import string
import itertools
from tqdm import tqdm
import hmac
import hashlib
import base64

defalut_charset = string.ascii_letters + string.digits + string.punctuation


def hmac_bruteforce(
    target_hmac, user, charset=defalut_charset, min_key_length=1, max_key_length=10
):
    for key_length in range(min_key_length, max_key_length + 1):
        for j, key_attempt in tqdm(
            enumerate(itertools.product(charset, repeat=key_length)),
            total=(len(charset) * key_length),
            unit="attempt",
        ):
            key = "".join(key_attempt)
            generated_hmac = hmac.new(
                key.encode(), user.encode(), hashlib.sha256
            ).digest()
            generated_hmac_b64 = base64.b64encode(generated_hmac)
            hmac_obtained = generated_hmac_b64.decode("ascii").replace("=", "")

            if hmac_obtained == target_hmac:
                return key
            if j % 3_000_000 == 0:
                print(f"Trying {key=}")

    return None


if __name__ == "__main__":
    cookie = "s%3Aadmin.H9hJuvnMJMPBP4MAXYwgcshE5CZFhIDo6dR66nIadIw"
    user = cookie.split(".")[0][4:]
    target_hmac = cookie.split(".")[-1]
    print(f"Bruteforcing {user=} {target_hmac=}")
    found_key = hmac_bruteforce(
        target_hmac, user, charset=string.ascii_lowercase, min_key_length=6
    )

    if found_key:
        print(f"Chiave trovata: {found_key}")
    else:
        print("Chiave non trovata")
